AWSTemplateFormatVersion: '2010-09-09'
Description: 'Database Stack for WordPress Setup'

Parameters:
  NetworkingStackName:
    Type: String
    Description: The name of the networking stack
    Default: WordPressNetworking

  DBName:
    Type: String
    Default: wordpressdb

  DBUser:
    Type: String
    Default: wpuser

  DBPassword:
    Type: String
    NoEcho: true

Resources:
  WordPressDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from the VPC
      VpcId: 
        Fn::ImportValue: 
          !Sub "${NetworkingStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 
            Fn::ImportValue: 
              !Sub "${NetworkingStackName}-VPCCIDR"

  WordPressDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      EngineVersion: 5.7
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      PubliclyAccessible: false
      VPCSecurityGroups: 
        - !Ref WordPressDBSecurityGroup
      DBSubnetGroupName: !Ref WordPressDBSubnetGroup
      MultiAZ: false

  WordPressDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds: 
        - Fn::ImportValue: !Sub "${NetworkingStackName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${NetworkingStackName}-PublicSubnet2"

Outputs:
  DatabaseEndpoint:
    Description: The connection endpoint for the database
    Value: !GetAtt WordPressDB.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DBEndpoint"

  DatabasePort:
    Description: The port the database is listening on
    Value: !GetAtt WordPressDB.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DBPort"